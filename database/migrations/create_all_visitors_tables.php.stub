<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

return new class extends Migration
{
    /** @var \Illuminate\Database\Schema\Builder */
    protected $schemaBuilder;

    /** @var array<string,string>  */
    protected $tableNames;

    public function __construct() {
        $this->schemaBuilder = Schema::connection($this->handleConnection());
        $this->tableNames = $this->handleTableNames();
    }

    private function handleConnection(): string {
        $connection = config('visitors.eloquent_connection');
        $connection = is_string($connection) ? $connection : 'mysql';

        if (config("database.connections.{$connection}.driver") !== 'mysql') {
            throw new \Exception('Error: The visit package tables were not migrated. Database driver must by "mysql" type.');
        }

        return $connection;
    }

    /**
     * @return array<string,string>
     */
    private function handleTableNames(): array {
        $tableNames = config('visitors.table_names');

        if (!is_array($tableNames) OR empty($tableNames)) {
            throw new \Exception('Error: config/visitors.php not loaded. Run [php artisan config:clear] or publish the package configuration and try again.');
        }

        return [
            'data'        => (string) config('visitors.table_names.data', 'visitors_data'),
            'expires'     => (string) config('visitors.table_names.expires', 'visitors_expires'),
            'statistics'  => (string) config('visitors.table_names.statistics', 'visitors_statistics'),
            'daily_graph' => (string) config('visitors.table_names.daily_graph', 'visitors_daily_graph'),
        ];
    }

    public function up(): void {
        $this->schemaBuilder->create($this->tableNames['expires'], function (Blueprint $table) {
            $table->mediumIncrements('id');

            $table->string("viewable_type", 60);
            $table->unsignedInteger("viewable_id");
            $table->unsignedTinyInteger('category');  // ENUM
            $table->ipAddress('ip_address')->nullable();
            $table->unique(
                ["viewable_type", "viewable_id", "ip_address", 'category'],
                'visitors_expires_viewable_ip_address_category_unique'
            );

            $table->timestamp('expires_at')->useCurrent();
        });

        $this->schemaBuilder->create($this->tableNames['data'], function (Blueprint $table) {
            $table->integerIncrements('id');

            $table->string("viewable_type", 60);
            $table->unsignedInteger("viewable_id");
            $table->unsignedTinyInteger('category');  // ENUM
            $table->boolean('is_crawler');
            $table->index(
                ["viewable_type", "viewable_id", 'category', 'is_crawler'],
                'visitors_data_viewable_category_crawler_index'
            );

            $table->string('country')->nullable();
            $table->string('language')->nullable();
            $table->unsignedTinyInteger('operating_system');  // ENUM

            $table->timestamp('visited_at')->useCurrent();
        });

        $this->schemaBuilder->create($this->tableNames['daily_graph'], function (Blueprint $table) {
            $table->mediumIncrements('id');

            $table->string("viewable_type", 60)->nullable();
            $table->unsignedInteger("viewable_id")->nullable();
            $table->unsignedTinyInteger('category')->nullable();  // ENUM
            $table->boolean('is_crawler')->nullable();

            $table->unique(
                ["viewable_type", "viewable_id", 'category', 'is_crawler'],
                'visitors_daily_graph_viewable_category_crawler_unique'
            );

            $table->json('daily_numbers');
            $table->unsignedSmallInteger('day_maximum');

            $table->unsignedMediumInteger('visit_total');
            $table->unsignedSmallInteger('visit_yesterday');
            $table->unsignedSmallInteger('visit_last_7_days');
            $table->unsignedMediumInteger('visit_last_30_days');
            $table->unsignedMediumInteger('visit_last_365_days');
        });

        $this->schemaBuilder->create($this->tableNames['statistics'], function (Blueprint $table) {
            $table->smallInteger('id')->primary();

            $table->json('daily_numbers');
            $table->unsignedSmallInteger('day_maximum');

            $table->unsignedMediumInteger('visit_total');
            $table->unsignedSmallInteger('visit_yesterday');
            $table->unsignedSmallInteger('visit_last_7_days');
            $table->unsignedMediumInteger('visit_last_30_days');
            $table->unsignedMediumInteger('visit_last_365_days');

            $table->json('sumar_countries');
            $table->json('sumar_languages');
            $table->json('sumar_operating_systems');

            $table->timestamp('from');
            $table->timestamp('to');
            $table->unsignedMediumInteger("last_data_id");

            $table->timestamp('updated_at')->useCurrent();
        });
    }

    public function down(): void {
        if (empty($this->tableNames)) {
            throw new \Exception('Error: config/visitors.php not found and defaults could not be merged. Please publish the package configuration before proceeding, or drop the tables manually.');
        }

        $this->schemaBuilder->dropIfExists($this->tableNames['data']);
        $this->schemaBuilder->dropIfExists($this->tableNames['expires']);
        $this->schemaBuilder->dropIfExists($this->tableNames['statistics']);
        $this->schemaBuilder->dropIfExists($this->tableNames['daily_graph']);
    }
};
